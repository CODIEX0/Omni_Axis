/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace YieldDistribution {
  export type DistributionStruct = {
    id: BigNumberish;
    assetToken: AddressLike;
    totalAmount: BigNumberish;
    totalSupply: BigNumberish;
    distributionDate: BigNumberish;
    claimDeadline: BigNumberish;
    description: string;
    isActive: boolean;
    totalClaimed: BigNumberish;
  };

  export type DistributionStructOutput = [
    id: bigint,
    assetToken: string,
    totalAmount: bigint,
    totalSupply: bigint,
    distributionDate: bigint,
    claimDeadline: bigint,
    description: string,
    isActive: boolean,
    totalClaimed: bigint
  ] & {
    id: bigint;
    assetToken: string;
    totalAmount: bigint;
    totalSupply: bigint;
    distributionDate: bigint;
    claimDeadline: bigint;
    description: string;
    isActive: boolean;
    totalClaimed: bigint;
  };
}

export interface YieldDistributionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ASSET_MANAGER_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "DISTRIBUTOR_ROLE"
      | "batchClaimYield"
      | "calculateUserShare"
      | "claimYield"
      | "closeDistribution"
      | "createDistribution"
      | "defaultClaimPeriod"
      | "distributions"
      | "emergencyWithdraw"
      | "getDistribution"
      | "getRoleAdmin"
      | "getUserClaimStatus"
      | "getUserDistributions"
      | "grantRole"
      | "hasRole"
      | "nextDistributionId"
      | "pause"
      | "paused"
      | "renounceRole"
      | "revokeRole"
      | "setDefaultClaimPeriod"
      | "supportsInterface"
      | "unpause"
      | "userClaims"
      | "userDistributions"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DistributionClosed"
      | "DistributionCreated"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
      | "YieldClaimed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ASSET_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DISTRIBUTOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchClaimYield",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateUserShare",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimYield",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeDistribution",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createDistribution",
    values: [AddressLike, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultClaimPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDistribution",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserClaimStatus",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDistributions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextDistributionId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultClaimPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userClaims",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userDistributions",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "ASSET_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DISTRIBUTOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchClaimYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateUserShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimYield", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closeDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultClaimPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserClaimStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDistributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextDistributionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultClaimPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userClaims", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userDistributions",
    data: BytesLike
  ): Result;
}

export namespace DistributionClosedEvent {
  export type InputTuple = [
    distributionId: BigNumberish,
    unclaimedAmount: BigNumberish
  ];
  export type OutputTuple = [distributionId: bigint, unclaimedAmount: bigint];
  export interface OutputObject {
    distributionId: bigint;
    unclaimedAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DistributionCreatedEvent {
  export type InputTuple = [
    distributionId: BigNumberish,
    assetToken: AddressLike,
    totalAmount: BigNumberish,
    description: string
  ];
  export type OutputTuple = [
    distributionId: bigint,
    assetToken: string,
    totalAmount: bigint,
    description: string
  ];
  export interface OutputObject {
    distributionId: bigint;
    assetToken: string;
    totalAmount: bigint;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace YieldClaimedEvent {
  export type InputTuple = [
    distributionId: BigNumberish,
    user: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    distributionId: bigint,
    user: string,
    amount: bigint
  ];
  export interface OutputObject {
    distributionId: bigint;
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface YieldDistribution extends BaseContract {
  connect(runner?: ContractRunner | null): YieldDistribution;
  waitForDeployment(): Promise<this>;

  interface: YieldDistributionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ASSET_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DISTRIBUTOR_ROLE: TypedContractMethod<[], [string], "view">;

  batchClaimYield: TypedContractMethod<
    [distributionIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  calculateUserShare: TypedContractMethod<
    [distributionId: BigNumberish, user: AddressLike],
    [bigint],
    "view"
  >;

  claimYield: TypedContractMethod<
    [distributionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  closeDistribution: TypedContractMethod<
    [distributionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createDistribution: TypedContractMethod<
    [
      assetToken: AddressLike,
      totalAmount: BigNumberish,
      description: string,
      customClaimPeriod: BigNumberish
    ],
    [void],
    "payable"
  >;

  defaultClaimPeriod: TypedContractMethod<[], [bigint], "view">;

  distributions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        boolean,
        bigint
      ] & {
        id: bigint;
        assetToken: string;
        totalAmount: bigint;
        totalSupply: bigint;
        distributionDate: bigint;
        claimDeadline: bigint;
        description: string;
        isActive: boolean;
        totalClaimed: bigint;
      }
    ],
    "view"
  >;

  emergencyWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  getDistribution: TypedContractMethod<
    [distributionId: BigNumberish],
    [YieldDistribution.DistributionStructOutput],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getUserClaimStatus: TypedContractMethod<
    [distributionId: BigNumberish, user: AddressLike],
    [[bigint, boolean] & { amount: bigint; claimed: boolean }],
    "view"
  >;

  getUserDistributions: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  nextDistributionId: TypedContractMethod<[], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setDefaultClaimPeriod: TypedContractMethod<
    [newPeriod: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  userClaims: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [[bigint, boolean] & { amount: bigint; claimed: boolean }],
    "view"
  >;

  userDistributions: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ASSET_MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DISTRIBUTOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "batchClaimYield"
  ): TypedContractMethod<
    [distributionIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculateUserShare"
  ): TypedContractMethod<
    [distributionId: BigNumberish, user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimYield"
  ): TypedContractMethod<[distributionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "closeDistribution"
  ): TypedContractMethod<[distributionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createDistribution"
  ): TypedContractMethod<
    [
      assetToken: AddressLike,
      totalAmount: BigNumberish,
      description: string,
      customClaimPeriod: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "defaultClaimPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "distributions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        boolean,
        bigint
      ] & {
        id: bigint;
        assetToken: string;
        totalAmount: bigint;
        totalSupply: bigint;
        distributionDate: bigint;
        claimDeadline: bigint;
        description: string;
        isActive: boolean;
        totalClaimed: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getDistribution"
  ): TypedContractMethod<
    [distributionId: BigNumberish],
    [YieldDistribution.DistributionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getUserClaimStatus"
  ): TypedContractMethod<
    [distributionId: BigNumberish, user: AddressLike],
    [[bigint, boolean] & { amount: bigint; claimed: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserDistributions"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextDistributionId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDefaultClaimPeriod"
  ): TypedContractMethod<[newPeriod: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userClaims"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [[bigint, boolean] & { amount: bigint; claimed: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "userDistributions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "DistributionClosed"
  ): TypedContractEvent<
    DistributionClosedEvent.InputTuple,
    DistributionClosedEvent.OutputTuple,
    DistributionClosedEvent.OutputObject
  >;
  getEvent(
    key: "DistributionCreated"
  ): TypedContractEvent<
    DistributionCreatedEvent.InputTuple,
    DistributionCreatedEvent.OutputTuple,
    DistributionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "YieldClaimed"
  ): TypedContractEvent<
    YieldClaimedEvent.InputTuple,
    YieldClaimedEvent.OutputTuple,
    YieldClaimedEvent.OutputObject
  >;

  filters: {
    "DistributionClosed(uint256,uint256)": TypedContractEvent<
      DistributionClosedEvent.InputTuple,
      DistributionClosedEvent.OutputTuple,
      DistributionClosedEvent.OutputObject
    >;
    DistributionClosed: TypedContractEvent<
      DistributionClosedEvent.InputTuple,
      DistributionClosedEvent.OutputTuple,
      DistributionClosedEvent.OutputObject
    >;

    "DistributionCreated(uint256,address,uint256,string)": TypedContractEvent<
      DistributionCreatedEvent.InputTuple,
      DistributionCreatedEvent.OutputTuple,
      DistributionCreatedEvent.OutputObject
    >;
    DistributionCreated: TypedContractEvent<
      DistributionCreatedEvent.InputTuple,
      DistributionCreatedEvent.OutputTuple,
      DistributionCreatedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "YieldClaimed(uint256,address,uint256)": TypedContractEvent<
      YieldClaimedEvent.InputTuple,
      YieldClaimedEvent.OutputTuple,
      YieldClaimedEvent.OutputObject
    >;
    YieldClaimed: TypedContractEvent<
      YieldClaimedEvent.InputTuple,
      YieldClaimedEvent.OutputTuple,
      YieldClaimedEvent.OutputObject
    >;
  };
}
