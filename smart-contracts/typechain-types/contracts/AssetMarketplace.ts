/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace AssetMarketplace {
  export type ListingStruct = {
    id: BigNumberish;
    seller: AddressLike;
    tokenContract: AddressLike;
    tokenAmount: BigNumberish;
    pricePerToken: BigNumberish;
    listingType: BigNumberish;
    status: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    highestBid: BigNumberish;
    highestBidder: AddressLike;
    escrowRequired: boolean;
    createdAt: BigNumberish;
  };

  export type ListingStructOutput = [
    id: bigint,
    seller: string,
    tokenContract: string,
    tokenAmount: bigint,
    pricePerToken: bigint,
    listingType: bigint,
    status: bigint,
    startTime: bigint,
    endTime: bigint,
    highestBid: bigint,
    highestBidder: string,
    escrowRequired: boolean,
    createdAt: bigint
  ] & {
    id: bigint;
    seller: string;
    tokenContract: string;
    tokenAmount: bigint;
    pricePerToken: bigint;
    listingType: bigint;
    status: bigint;
    startTime: bigint;
    endTime: bigint;
    highestBid: bigint;
    highestBidder: string;
    escrowRequired: boolean;
    createdAt: bigint;
  };

  export type BidStruct = {
    bidder: AddressLike;
    amount: BigNumberish;
    timestamp: BigNumberish;
    withdrawn: boolean;
  };

  export type BidStructOutput = [
    bidder: string,
    amount: bigint,
    timestamp: bigint,
    withdrawn: boolean
  ] & { bidder: string; amount: bigint; timestamp: bigint; withdrawn: boolean };
}

export interface AssetMarketplaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "MODERATOR_ROLE"
      | "buyFixedPrice"
      | "cancelListing"
      | "confirmEscrow"
      | "createListing"
      | "escrows"
      | "feeRecipient"
      | "finalizeAuction"
      | "getListing"
      | "getListingBids"
      | "getRoleAdmin"
      | "getUserListings"
      | "grantRole"
      | "hasRole"
      | "listingBids"
      | "listings"
      | "pause"
      | "paused"
      | "placeBid"
      | "platformFeeRate"
      | "renounceRole"
      | "revokeRole"
      | "setFeeRecipient"
      | "setPlatformFeeRate"
      | "supportsInterface"
      | "unpause"
      | "userBalances"
      | "userListings"
      | "withdrawBid"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BidPlaced"
      | "BidWithdrawn"
      | "EscrowConfirmed"
      | "EscrowCreated"
      | "EscrowReleased"
      | "ListingCreated"
      | "ListingSold"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MODERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyFixedPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmEscrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createListing",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "escrows",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getListingBids",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserListings",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "listingBids",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeBid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "platformFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFeeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userBalances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userListings",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBid",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MODERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyFixedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "escrows", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getListing", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getListingBids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listingBids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBid",
    data: BytesLike
  ): Result;
}

export namespace BidPlacedEvent {
  export type InputTuple = [
    listingId: BigNumberish,
    bidder: AddressLike,
    bidAmount: BigNumberish
  ];
  export type OutputTuple = [
    listingId: bigint,
    bidder: string,
    bidAmount: bigint
  ];
  export interface OutputObject {
    listingId: bigint;
    bidder: string;
    bidAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BidWithdrawnEvent {
  export type InputTuple = [
    listingId: BigNumberish,
    bidder: AddressLike,
    bidAmount: BigNumberish
  ];
  export type OutputTuple = [
    listingId: bigint,
    bidder: string,
    bidAmount: bigint
  ];
  export interface OutputObject {
    listingId: bigint;
    bidder: string;
    bidAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowConfirmedEvent {
  export type InputTuple = [
    escrowId: BigNumberish,
    confirmer: AddressLike,
    buyerConfirmed: boolean,
    sellerConfirmed: boolean
  ];
  export type OutputTuple = [
    escrowId: bigint,
    confirmer: string,
    buyerConfirmed: boolean,
    sellerConfirmed: boolean
  ];
  export interface OutputObject {
    escrowId: bigint;
    confirmer: string;
    buyerConfirmed: boolean;
    sellerConfirmed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowCreatedEvent {
  export type InputTuple = [
    escrowId: BigNumberish,
    listingId: BigNumberish,
    buyer: AddressLike,
    seller: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    escrowId: bigint,
    listingId: bigint,
    buyer: string,
    seller: string,
    amount: bigint
  ];
  export interface OutputObject {
    escrowId: bigint;
    listingId: bigint;
    buyer: string;
    seller: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowReleasedEvent {
  export type InputTuple = [
    escrowId: BigNumberish,
    buyer: AddressLike,
    seller: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    escrowId: bigint,
    buyer: string,
    seller: string,
    amount: bigint
  ];
  export interface OutputObject {
    escrowId: bigint;
    buyer: string;
    seller: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListingCreatedEvent {
  export type InputTuple = [
    listingId: BigNumberish,
    seller: AddressLike,
    tokenContract: AddressLike,
    tokenAmount: BigNumberish,
    pricePerToken: BigNumberish,
    listingType: BigNumberish
  ];
  export type OutputTuple = [
    listingId: bigint,
    seller: string,
    tokenContract: string,
    tokenAmount: bigint,
    pricePerToken: bigint,
    listingType: bigint
  ];
  export interface OutputObject {
    listingId: bigint;
    seller: string;
    tokenContract: string;
    tokenAmount: bigint;
    pricePerToken: bigint;
    listingType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListingSoldEvent {
  export type InputTuple = [
    listingId: BigNumberish,
    buyer: AddressLike,
    totalPrice: BigNumberish
  ];
  export type OutputTuple = [
    listingId: bigint,
    buyer: string,
    totalPrice: bigint
  ];
  export interface OutputObject {
    listingId: bigint;
    buyer: string;
    totalPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AssetMarketplace extends BaseContract {
  connect(runner?: ContractRunner | null): AssetMarketplace;
  waitForDeployment(): Promise<this>;

  interface: AssetMarketplaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MODERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  buyFixedPrice: TypedContractMethod<
    [listingId: BigNumberish],
    [void],
    "payable"
  >;

  cancelListing: TypedContractMethod<
    [listingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  confirmEscrow: TypedContractMethod<
    [escrowId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createListing: TypedContractMethod<
    [
      tokenContract: AddressLike,
      tokenAmount: BigNumberish,
      pricePerToken: BigNumberish,
      listingType: BigNumberish,
      duration: BigNumberish,
      escrowRequired: boolean
    ],
    [bigint],
    "nonpayable"
  >;

  escrows: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, boolean, boolean, boolean, bigint, bigint] & {
        buyer: string;
        seller: string;
        amount: bigint;
        buyerConfirmed: boolean;
        sellerConfirmed: boolean;
        disputed: boolean;
        createdAt: bigint;
        timeoutAt: bigint;
      }
    ],
    "view"
  >;

  feeRecipient: TypedContractMethod<[], [string], "view">;

  finalizeAuction: TypedContractMethod<
    [listingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getListing: TypedContractMethod<
    [listingId: BigNumberish],
    [AssetMarketplace.ListingStructOutput],
    "view"
  >;

  getListingBids: TypedContractMethod<
    [listingId: BigNumberish],
    [AssetMarketplace.BidStructOutput[]],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getUserListings: TypedContractMethod<[user: AddressLike], [bigint[]], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  listingBids: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        bidder: string;
        amount: bigint;
        timestamp: bigint;
        withdrawn: boolean;
      }
    ],
    "view"
  >;

  listings: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        boolean,
        bigint
      ] & {
        id: bigint;
        seller: string;
        tokenContract: string;
        tokenAmount: bigint;
        pricePerToken: bigint;
        listingType: bigint;
        status: bigint;
        startTime: bigint;
        endTime: bigint;
        highestBid: bigint;
        highestBidder: string;
        escrowRequired: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  placeBid: TypedContractMethod<[listingId: BigNumberish], [void], "payable">;

  platformFeeRate: TypedContractMethod<[], [bigint], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setFeeRecipient: TypedContractMethod<
    [newFeeRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  setPlatformFeeRate: TypedContractMethod<
    [newFeeRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  userBalances: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  userListings: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  withdrawBid: TypedContractMethod<
    [listingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MODERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "buyFixedPrice"
  ): TypedContractMethod<[listingId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "cancelListing"
  ): TypedContractMethod<[listingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "confirmEscrow"
  ): TypedContractMethod<[escrowId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createListing"
  ): TypedContractMethod<
    [
      tokenContract: AddressLike,
      tokenAmount: BigNumberish,
      pricePerToken: BigNumberish,
      listingType: BigNumberish,
      duration: BigNumberish,
      escrowRequired: boolean
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "escrows"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, boolean, boolean, boolean, bigint, bigint] & {
        buyer: string;
        seller: string;
        amount: bigint;
        buyerConfirmed: boolean;
        sellerConfirmed: boolean;
        disputed: boolean;
        createdAt: bigint;
        timeoutAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "feeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "finalizeAuction"
  ): TypedContractMethod<[listingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getListing"
  ): TypedContractMethod<
    [listingId: BigNumberish],
    [AssetMarketplace.ListingStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getListingBids"
  ): TypedContractMethod<
    [listingId: BigNumberish],
    [AssetMarketplace.BidStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getUserListings"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "listingBids"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        bidder: string;
        amount: bigint;
        timestamp: bigint;
        withdrawn: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "listings"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        boolean,
        bigint
      ] & {
        id: bigint;
        seller: string;
        tokenContract: string;
        tokenAmount: bigint;
        pricePerToken: bigint;
        listingType: bigint;
        status: bigint;
        startTime: bigint;
        endTime: bigint;
        highestBid: bigint;
        highestBidder: string;
        escrowRequired: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "placeBid"
  ): TypedContractMethod<[listingId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "platformFeeRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFeeRecipient"
  ): TypedContractMethod<[newFeeRecipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPlatformFeeRate"
  ): TypedContractMethod<[newFeeRate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userBalances"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userListings"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawBid"
  ): TypedContractMethod<[listingId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "BidPlaced"
  ): TypedContractEvent<
    BidPlacedEvent.InputTuple,
    BidPlacedEvent.OutputTuple,
    BidPlacedEvent.OutputObject
  >;
  getEvent(
    key: "BidWithdrawn"
  ): TypedContractEvent<
    BidWithdrawnEvent.InputTuple,
    BidWithdrawnEvent.OutputTuple,
    BidWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "EscrowConfirmed"
  ): TypedContractEvent<
    EscrowConfirmedEvent.InputTuple,
    EscrowConfirmedEvent.OutputTuple,
    EscrowConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowCreated"
  ): TypedContractEvent<
    EscrowCreatedEvent.InputTuple,
    EscrowCreatedEvent.OutputTuple,
    EscrowCreatedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowReleased"
  ): TypedContractEvent<
    EscrowReleasedEvent.InputTuple,
    EscrowReleasedEvent.OutputTuple,
    EscrowReleasedEvent.OutputObject
  >;
  getEvent(
    key: "ListingCreated"
  ): TypedContractEvent<
    ListingCreatedEvent.InputTuple,
    ListingCreatedEvent.OutputTuple,
    ListingCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ListingSold"
  ): TypedContractEvent<
    ListingSoldEvent.InputTuple,
    ListingSoldEvent.OutputTuple,
    ListingSoldEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "BidPlaced(uint256,address,uint256)": TypedContractEvent<
      BidPlacedEvent.InputTuple,
      BidPlacedEvent.OutputTuple,
      BidPlacedEvent.OutputObject
    >;
    BidPlaced: TypedContractEvent<
      BidPlacedEvent.InputTuple,
      BidPlacedEvent.OutputTuple,
      BidPlacedEvent.OutputObject
    >;

    "BidWithdrawn(uint256,address,uint256)": TypedContractEvent<
      BidWithdrawnEvent.InputTuple,
      BidWithdrawnEvent.OutputTuple,
      BidWithdrawnEvent.OutputObject
    >;
    BidWithdrawn: TypedContractEvent<
      BidWithdrawnEvent.InputTuple,
      BidWithdrawnEvent.OutputTuple,
      BidWithdrawnEvent.OutputObject
    >;

    "EscrowConfirmed(uint256,address,bool,bool)": TypedContractEvent<
      EscrowConfirmedEvent.InputTuple,
      EscrowConfirmedEvent.OutputTuple,
      EscrowConfirmedEvent.OutputObject
    >;
    EscrowConfirmed: TypedContractEvent<
      EscrowConfirmedEvent.InputTuple,
      EscrowConfirmedEvent.OutputTuple,
      EscrowConfirmedEvent.OutputObject
    >;

    "EscrowCreated(uint256,uint256,address,address,uint256)": TypedContractEvent<
      EscrowCreatedEvent.InputTuple,
      EscrowCreatedEvent.OutputTuple,
      EscrowCreatedEvent.OutputObject
    >;
    EscrowCreated: TypedContractEvent<
      EscrowCreatedEvent.InputTuple,
      EscrowCreatedEvent.OutputTuple,
      EscrowCreatedEvent.OutputObject
    >;

    "EscrowReleased(uint256,address,address,uint256)": TypedContractEvent<
      EscrowReleasedEvent.InputTuple,
      EscrowReleasedEvent.OutputTuple,
      EscrowReleasedEvent.OutputObject
    >;
    EscrowReleased: TypedContractEvent<
      EscrowReleasedEvent.InputTuple,
      EscrowReleasedEvent.OutputTuple,
      EscrowReleasedEvent.OutputObject
    >;

    "ListingCreated(uint256,address,address,uint256,uint256,uint8)": TypedContractEvent<
      ListingCreatedEvent.InputTuple,
      ListingCreatedEvent.OutputTuple,
      ListingCreatedEvent.OutputObject
    >;
    ListingCreated: TypedContractEvent<
      ListingCreatedEvent.InputTuple,
      ListingCreatedEvent.OutputTuple,
      ListingCreatedEvent.OutputObject
    >;

    "ListingSold(uint256,address,uint256)": TypedContractEvent<
      ListingSoldEvent.InputTuple,
      ListingSoldEvent.OutputTuple,
      ListingSoldEvent.OutputObject
    >;
    ListingSold: TypedContractEvent<
      ListingSoldEvent.InputTuple,
      ListingSoldEvent.OutputTuple,
      ListingSoldEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
