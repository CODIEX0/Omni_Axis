/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace DecentralizedKYC {
  export type VerifierStruct = {
    isActive: boolean;
    name: string;
    licenseNumber: string;
    supportedJurisdictions: string[];
    totalVerifications: BigNumberish;
    reputationScore: BigNumberish;
  };

  export type VerifierStructOutput = [
    isActive: boolean,
    name: string,
    licenseNumber: string,
    supportedJurisdictions: string[],
    totalVerifications: bigint,
    reputationScore: bigint
  ] & {
    isActive: boolean;
    name: string;
    licenseNumber: string;
    supportedJurisdictions: string[];
    totalVerifications: bigint;
    reputationScore: bigint;
  };
}

export interface DecentralizedKYCInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "COMPLIANCE_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "REGULATOR_ROLE"
      | "VERIFIER_ROLE"
      | "adminSetKYC"
      | "allVerifiedUsers"
      | "allVerifiers"
      | "blacklistAddress"
      | "blacklistedAddresses"
      | "dataAccessPermissions"
      | "deactivateVerifier"
      | "eip712Domain"
      | "getAMLRisk"
      | "getKYCRecord"
      | "getRoleAdmin"
      | "getUsersByJurisdiction"
      | "getVerifiedUsersCount"
      | "getVerifier"
      | "grantDataAccess"
      | "grantRole"
      | "hasRole"
      | "isApprovedForJurisdiction"
      | "isKYCVerified"
      | "jurisdictionUsers"
      | "kycRecords"
      | "meetsKYCLevel"
      | "nonces"
      | "pause"
      | "paused"
      | "privacyOptOut"
      | "registerVerifier"
      | "renounceRole"
      | "revokeDataAccess"
      | "revokeKYC"
      | "revokeRole"
      | "setPrivacyOptOut"
      | "supportsInterface"
      | "unpause"
      | "updateVerifierReputation"
      | "verifiers"
      | "verifyKYC"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddressBlacklisted"
      | "EIP712DomainChanged"
      | "JurisdictionApproved"
      | "KYCRevoked"
      | "KYCUpdated"
      | "KYCVerified"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
      | "VerifierDeactivated"
      | "VerifierRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "COMPLIANCE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REGULATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VERIFIER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminSetKYC",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "allVerifiedUsers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allVerifiers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistAddress",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistedAddresses",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dataAccessPermissions",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAMLRisk",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getKYCRecord",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUsersByJurisdiction",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifiedUsersCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantDataAccess",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForJurisdiction",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isKYCVerified",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "jurisdictionUsers",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "kycRecords",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "meetsKYCLevel",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "privacyOptOut",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerVerifier",
    values: [AddressLike, string, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeDataAccess",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeKYC",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrivacyOptOut",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateVerifierReputation",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifiers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyKYC",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "COMPLIANCE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REGULATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VERIFIER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminSetKYC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allVerifiedUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blacklistAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blacklistedAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dataAccessPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAMLRisk", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getKYCRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUsersByJurisdiction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifiedUsersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantDataAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForJurisdiction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isKYCVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jurisdictionUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kycRecords", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "meetsKYCLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "privacyOptOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeDataAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeKYC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPrivacyOptOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateVerifierReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifiers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifyKYC", data: BytesLike): Result;
}

export namespace AddressBlacklistedEvent {
  export type InputTuple = [addr: AddressLike, reason: string];
  export type OutputTuple = [addr: string, reason: string];
  export interface OutputObject {
    addr: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JurisdictionApprovedEvent {
  export type InputTuple = [user: AddressLike, jurisdiction: string];
  export type OutputTuple = [user: string, jurisdiction: string];
  export interface OutputObject {
    user: string;
    jurisdiction: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KYCRevokedEvent {
  export type InputTuple = [
    user: AddressLike,
    revoker: AddressLike,
    reason: string
  ];
  export type OutputTuple = [user: string, revoker: string, reason: string];
  export interface OutputObject {
    user: string;
    revoker: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KYCUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    oldLevel: BigNumberish,
    newLevel: BigNumberish,
    oldRisk: BigNumberish,
    newRisk: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    oldLevel: bigint,
    newLevel: bigint,
    oldRisk: bigint,
    newRisk: bigint
  ];
  export interface OutputObject {
    user: string;
    oldLevel: bigint;
    newLevel: bigint;
    oldRisk: bigint;
    newRisk: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KYCVerifiedEvent {
  export type InputTuple = [
    user: AddressLike,
    level: BigNumberish,
    riskRating: BigNumberish,
    verifier: AddressLike,
    expiresAt: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    level: bigint,
    riskRating: bigint,
    verifier: string,
    expiresAt: bigint
  ];
  export interface OutputObject {
    user: string;
    level: bigint;
    riskRating: bigint;
    verifier: string;
    expiresAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerifierDeactivatedEvent {
  export type InputTuple = [verifier: AddressLike];
  export type OutputTuple = [verifier: string];
  export interface OutputObject {
    verifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerifierRegisteredEvent {
  export type InputTuple = [verifier: AddressLike, name: string];
  export type OutputTuple = [verifier: string, name: string];
  export interface OutputObject {
    verifier: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DecentralizedKYC extends BaseContract {
  connect(runner?: ContractRunner | null): DecentralizedKYC;
  waitForDeployment(): Promise<this>;

  interface: DecentralizedKYCInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  COMPLIANCE_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  REGULATOR_ROLE: TypedContractMethod<[], [string], "view">;

  VERIFIER_ROLE: TypedContractMethod<[], [string], "view">;

  adminSetKYC: TypedContractMethod<
    [
      user: AddressLike,
      level: BigNumberish,
      riskRating: BigNumberish,
      expiresAt: BigNumberish,
      jurisdiction: string,
      ipfsHash: string
    ],
    [void],
    "nonpayable"
  >;

  allVerifiedUsers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  allVerifiers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  blacklistAddress: TypedContractMethod<
    [addr: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;

  blacklistedAddresses: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  dataAccessPermissions: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  deactivateVerifier: TypedContractMethod<
    [verifierAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  getAMLRisk: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getKYCRecord: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint, bigint, string, boolean] & {
        level: bigint;
        riskRating: bigint;
        verifiedAt: bigint;
        expiresAt: bigint;
        verifier: string;
        isActive: boolean;
      }
    ],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getUsersByJurisdiction: TypedContractMethod<
    [jurisdiction: string],
    [string[]],
    "view"
  >;

  getVerifiedUsersCount: TypedContractMethod<[], [bigint], "view">;

  getVerifier: TypedContractMethod<
    [verifierAddr: AddressLike],
    [DecentralizedKYC.VerifierStructOutput],
    "view"
  >;

  grantDataAccess: TypedContractMethod<
    [accessor: AddressLike],
    [void],
    "nonpayable"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isApprovedForJurisdiction: TypedContractMethod<
    [user: AddressLike, jurisdiction: string],
    [boolean],
    "view"
  >;

  isKYCVerified: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  jurisdictionUsers: TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [string],
    "view"
  >;

  kycRecords: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, string, string, boolean] & {
        level: bigint;
        riskRating: bigint;
        verifiedAt: bigint;
        expiresAt: bigint;
        verifier: string;
        ipfsHash: string;
        isActive: boolean;
      }
    ],
    "view"
  >;

  meetsKYCLevel: TypedContractMethod<
    [user: AddressLike, requiredLevel: BigNumberish],
    [boolean],
    "view"
  >;

  nonces: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  privacyOptOut: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  registerVerifier: TypedContractMethod<
    [
      verifierAddr: AddressLike,
      name: string,
      licenseNumber: string,
      supportedJurisdictions: string[]
    ],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeDataAccess: TypedContractMethod<
    [accessor: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeKYC: TypedContractMethod<
    [user: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setPrivacyOptOut: TypedContractMethod<
    [optOut: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateVerifierReputation: TypedContractMethod<
    [verifierAddr: AddressLike, newScore: BigNumberish],
    [void],
    "nonpayable"
  >;

  verifiers: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, string, string, bigint, bigint] & {
        isActive: boolean;
        name: string;
        licenseNumber: string;
        totalVerifications: bigint;
        reputationScore: bigint;
      }
    ],
    "view"
  >;

  verifyKYC: TypedContractMethod<
    [
      user: AddressLike,
      level: BigNumberish,
      riskRating: BigNumberish,
      expiresAt: BigNumberish,
      jurisdiction: string,
      ipfsHash: string,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "COMPLIANCE_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "REGULATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERIFIER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "adminSetKYC"
  ): TypedContractMethod<
    [
      user: AddressLike,
      level: BigNumberish,
      riskRating: BigNumberish,
      expiresAt: BigNumberish,
      jurisdiction: string,
      ipfsHash: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allVerifiedUsers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "allVerifiers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "blacklistAddress"
  ): TypedContractMethod<
    [addr: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "blacklistedAddresses"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "dataAccessPermissions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "deactivateVerifier"
  ): TypedContractMethod<[verifierAddr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAMLRisk"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getKYCRecord"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint, bigint, string, boolean] & {
        level: bigint;
        riskRating: bigint;
        verifiedAt: bigint;
        expiresAt: bigint;
        verifier: string;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getUsersByJurisdiction"
  ): TypedContractMethod<[jurisdiction: string], [string[]], "view">;
  getFunction(
    nameOrSignature: "getVerifiedUsersCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVerifier"
  ): TypedContractMethod<
    [verifierAddr: AddressLike],
    [DecentralizedKYC.VerifierStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantDataAccess"
  ): TypedContractMethod<[accessor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForJurisdiction"
  ): TypedContractMethod<
    [user: AddressLike, jurisdiction: string],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isKYCVerified"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "jurisdictionUsers"
  ): TypedContractMethod<[arg0: string, arg1: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "kycRecords"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, string, string, boolean] & {
        level: bigint;
        riskRating: bigint;
        verifiedAt: bigint;
        expiresAt: bigint;
        verifier: string;
        ipfsHash: string;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "meetsKYCLevel"
  ): TypedContractMethod<
    [user: AddressLike, requiredLevel: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "privacyOptOut"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerVerifier"
  ): TypedContractMethod<
    [
      verifierAddr: AddressLike,
      name: string,
      licenseNumber: string,
      supportedJurisdictions: string[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeDataAccess"
  ): TypedContractMethod<[accessor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeKYC"
  ): TypedContractMethod<
    [user: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPrivacyOptOut"
  ): TypedContractMethod<[optOut: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateVerifierReputation"
  ): TypedContractMethod<
    [verifierAddr: AddressLike, newScore: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifiers"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, string, string, bigint, bigint] & {
        isActive: boolean;
        name: string;
        licenseNumber: string;
        totalVerifications: bigint;
        reputationScore: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyKYC"
  ): TypedContractMethod<
    [
      user: AddressLike,
      level: BigNumberish,
      riskRating: BigNumberish,
      expiresAt: BigNumberish,
      jurisdiction: string,
      ipfsHash: string,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AddressBlacklisted"
  ): TypedContractEvent<
    AddressBlacklistedEvent.InputTuple,
    AddressBlacklistedEvent.OutputTuple,
    AddressBlacklistedEvent.OutputObject
  >;
  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "JurisdictionApproved"
  ): TypedContractEvent<
    JurisdictionApprovedEvent.InputTuple,
    JurisdictionApprovedEvent.OutputTuple,
    JurisdictionApprovedEvent.OutputObject
  >;
  getEvent(
    key: "KYCRevoked"
  ): TypedContractEvent<
    KYCRevokedEvent.InputTuple,
    KYCRevokedEvent.OutputTuple,
    KYCRevokedEvent.OutputObject
  >;
  getEvent(
    key: "KYCUpdated"
  ): TypedContractEvent<
    KYCUpdatedEvent.InputTuple,
    KYCUpdatedEvent.OutputTuple,
    KYCUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "KYCVerified"
  ): TypedContractEvent<
    KYCVerifiedEvent.InputTuple,
    KYCVerifiedEvent.OutputTuple,
    KYCVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "VerifierDeactivated"
  ): TypedContractEvent<
    VerifierDeactivatedEvent.InputTuple,
    VerifierDeactivatedEvent.OutputTuple,
    VerifierDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: "VerifierRegistered"
  ): TypedContractEvent<
    VerifierRegisteredEvent.InputTuple,
    VerifierRegisteredEvent.OutputTuple,
    VerifierRegisteredEvent.OutputObject
  >;

  filters: {
    "AddressBlacklisted(address,string)": TypedContractEvent<
      AddressBlacklistedEvent.InputTuple,
      AddressBlacklistedEvent.OutputTuple,
      AddressBlacklistedEvent.OutputObject
    >;
    AddressBlacklisted: TypedContractEvent<
      AddressBlacklistedEvent.InputTuple,
      AddressBlacklistedEvent.OutputTuple,
      AddressBlacklistedEvent.OutputObject
    >;

    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "JurisdictionApproved(address,string)": TypedContractEvent<
      JurisdictionApprovedEvent.InputTuple,
      JurisdictionApprovedEvent.OutputTuple,
      JurisdictionApprovedEvent.OutputObject
    >;
    JurisdictionApproved: TypedContractEvent<
      JurisdictionApprovedEvent.InputTuple,
      JurisdictionApprovedEvent.OutputTuple,
      JurisdictionApprovedEvent.OutputObject
    >;

    "KYCRevoked(address,address,string)": TypedContractEvent<
      KYCRevokedEvent.InputTuple,
      KYCRevokedEvent.OutputTuple,
      KYCRevokedEvent.OutputObject
    >;
    KYCRevoked: TypedContractEvent<
      KYCRevokedEvent.InputTuple,
      KYCRevokedEvent.OutputTuple,
      KYCRevokedEvent.OutputObject
    >;

    "KYCUpdated(address,uint8,uint8,uint8,uint8)": TypedContractEvent<
      KYCUpdatedEvent.InputTuple,
      KYCUpdatedEvent.OutputTuple,
      KYCUpdatedEvent.OutputObject
    >;
    KYCUpdated: TypedContractEvent<
      KYCUpdatedEvent.InputTuple,
      KYCUpdatedEvent.OutputTuple,
      KYCUpdatedEvent.OutputObject
    >;

    "KYCVerified(address,uint8,uint8,address,uint256)": TypedContractEvent<
      KYCVerifiedEvent.InputTuple,
      KYCVerifiedEvent.OutputTuple,
      KYCVerifiedEvent.OutputObject
    >;
    KYCVerified: TypedContractEvent<
      KYCVerifiedEvent.InputTuple,
      KYCVerifiedEvent.OutputTuple,
      KYCVerifiedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "VerifierDeactivated(address)": TypedContractEvent<
      VerifierDeactivatedEvent.InputTuple,
      VerifierDeactivatedEvent.OutputTuple,
      VerifierDeactivatedEvent.OutputObject
    >;
    VerifierDeactivated: TypedContractEvent<
      VerifierDeactivatedEvent.InputTuple,
      VerifierDeactivatedEvent.OutputTuple,
      VerifierDeactivatedEvent.OutputObject
    >;

    "VerifierRegistered(address,string)": TypedContractEvent<
      VerifierRegisteredEvent.InputTuple,
      VerifierRegisteredEvent.OutputTuple,
      VerifierRegisteredEvent.OutputObject
    >;
    VerifierRegistered: TypedContractEvent<
      VerifierRegisteredEvent.InputTuple,
      VerifierRegisteredEvent.OutputTuple,
      VerifierRegisteredEvent.OutputObject
    >;
  };
}
